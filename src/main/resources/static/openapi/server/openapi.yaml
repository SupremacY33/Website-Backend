openapi: 3.0.3

info:
  title: Backend Project CRUD Openapi
  version: 1.0.0
  description: Kotlin CRUD OpenAPI for ReactJS

servers:
  - url: http://localhost:8080

paths:
  /greetings:
    get:
      tags:
        - customers
      description: string message to be displayed over ReactJS
      summary: string message
      operationId: customerGreeting
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customers"
        400:
          description: Bad Request
        404:
          description: Not Found
        500:
          description: Server Error

  /postingCustomers:
    post:
      tags:
        - customers
      description: openapi for posting or adding customers
      summary: addition of customers in database
      operationId: customerAddition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/additionalCustomers"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Record Created Successfully"
        404:
          description: Not Found
        400:
          description: Bad Request
        500:
          description: Server Error

  /customerUpdate/{id}:
    put:
      tags:
        - customers
      description: updating customers saved data
      summary: updating customers previous recorded data and saving the new record
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/additionalCustomers"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  updateMessage:
                    type: string
        404:
          description: Not Found
        400:
          description: Bad Request
        500:
          description: Server Error

  /deleteCustomer/{id}:
    delete:
      tags:
        - customers
      description: delete inactive customers from record
      summary: delete every inactive customers from the database records
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleteMessage:
                    type: string
        400:
          description: Bad Request
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /customer/login:
    post:
      tags:
        - customers
      description: api for logging in user at frontend
      summary: logging the user in website
      operationId: customerLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/informationForLogin"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  loginMessage:
                    type: string
        401:
          description: Unauthorized
        404:
          description: Not Found
        500:
          description: Internal Server Error


  /completeDataCall:
    get:
      tags:
        - customers
      description: getting all data of customer from database
      summary: customer data
      operationId: completeCallToData
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/callToCompleteData"
        400:
          description: Bad Request
        404:
          description: Not Found
        500:
          description: Server Error

components:
  schemas:

    Customers:
      type: object
      properties:
        message:
          type: string

    additionalCustomers:
      type: object
      properties:
        name:
          type: string
          example: "johnathan"
        email:
          type: string
          example: "johnathan@gmail.com"
        password:
          type: string
          example: "johnathan"
        confirmPassword:
          type: string
          example: "johnathan"

    informationForLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    callToCompleteData:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
        confirmPassword:
          type: string